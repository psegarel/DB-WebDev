<?php
// $Id: inviteagain.module,v 0.1 2009/02/16 13:03:08 jaapx Exp $

/**
 * @file
 * Allows your users to invite again all their invites.
 */

/**
 * Implementation of hook_menu().
 */
function inviteagain_menu() {
  $items['user/%user/invites/inviteagain'] = array(
    'title' => 'Invite again',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inviteagain_monitor'),	
    'access callback' => 'inviteagain_access_callback',	
    'access arguments' => array('allowinviteagain',1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function inviteagain_perm() {
   return array( 'allowinviteagain' );
}

function inviteagain_access_callback($permission, $account) {
  return ($account->uid == $GLOBALS['user']->uid && user_access($permission));
}

/**
 * Implementation of hook_theme()
 */
function inviteagain_theme() {
  return array(
    'inviteagain_page_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'inviteagainlist_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Implementation of hook_help().
 */

function inviteagain_help($path, $arg) {
    if ($path=='user/%/invites/inviteagain') {
      $output = '<p>'. t("The invitations shown on this page are not used, not withdrawn and older than 2 days. The expiry date is not older than 30 days. Select the invitations you want to use for an 'invite again'");}
return $output;
}


/**
 * Check status of formprocessing and chooses the form.
 */
function inviteagain_monitor($form_state) {
  if ((!isset($_SESSION['operation']))||($_SESSION['operation']==0)) {
      $form['admin']  = inviteagainlist_form($form, $form_state);
  }
  else  { 
     $form['admin'] = inviteagain_page_form($form, $form_state);  
  }
  return $form;
}

/**
 * Form builder inviteagain list.
 */
function inviteagainlist_form($form, &$form_state) {
global $user;

// Only invites are seected that are older than 2 days and with an expiry date that is not older than 30 days
$now = time();
$startdate = $now - 2 * 60 * 60 * 24;
$enddate = $now - 30 * 60 * 60 * 24;

$result = pager_query(db_rewrite_sql('SELECT * FROM {invite}  WHERE (uid = %d AND joined = 0 AND canceled = 0 AND created < %d AND expiry > %d) ORDER by email'), 100, 0, NULL, array('uid' => $user->uid, 'created' => $startdate, 'expiry' => $enddate));
  $form['options']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Invite again'),
    '#submit' => array('inviteagainlist_form_submit'),
  );
  $i=0;
  $invites = array();
  $invitesdb=array();
  while ($invite = db_fetch_object($result)) {
    $i++;
	$invites[$i] = '';
	$invitesdb['email'][$i] = $invite->email;
	$invitesdb['reg_code'][$i] = $invite->reg_code;
	$invitesdb['resent'][$i] = $invite->resent;
    $form['email'][$i] =  array('#value' => $invite->email);
	$form['created'][$i] = array('#value' => date('d/M/Y', $invite->created));
	$form['expiry'][$i] = array('#value' => date('d/M/Y', $invite->expiry));
	if ($invite->resent == 0) {$form['resent'][$i] = array('#value' => 'no');} else {$form['resent'][$i] = array('#value' => 'yes');}
  }
  $form['invites'] = array('#type' => 'checkboxes', '#options' => $invites);
  $form['pager'] = array('#value' => theme('pager', NULL, 100, 0));
  $form['#theme'] = 'inviteagainlist_form';
  $_SESSION['invitesdb'] = $invitesdb;
  return $form;
}

/**
 * Theme inviteagain list
 */
function theme_inviteagainlist_form($form) {
// If there are rows in this form, then $form['email'] contains a list of
// the title form elements.
  $has_posts = isset($form['email']) && is_array($form['email']);
  $select_header = $has_posts ? theme('table_select_header_cell') : '';
  $header = array($select_header, t('email'), t('created'), t('expiry'), t('resent'));
  $output = '';
  $output .= drupal_render($form['options']);
  if ($has_posts) {
    foreach (element_children($form['email']) as $key) {
      $row = array();
      $row[] = drupal_render($form['invites'][$key]);
      $row[] = drupal_render($form['email'][$key]);
	  $row[] = drupal_render($form['created'][$key]);
	  $row[] = drupal_render($form['expiry'][$key]);
  	  $row[] = drupal_render($form['resent'][$key]);
      $rows[] = $row;
    }
  }
  else {
    $rows[] = array(array('data' => t('No invites available.'), 'colspan' => '6'));
  }
  $output .= theme('table', $header, $rows);
  if ($form['pager']['#value']) {
    $output .= drupal_render($form['pager']);
  }
  $output .= drupal_render($form);
  return $output;
}

/**
 * Controls the status of formprocessing and sends back to monitor.
 */
function inviteagainlist_form_submit($form, &$form_state) {
   global $user;
//Verwerken van het inviteagainlist_form
if ($_SESSION['operation']==0) {
   $invites = array_filter($form_state['values']['invites']);
   if (count($invites) == 0) {
      form_set_error('', t('No items selected.'));
      return;
   }
   else {
// Filter out unchecked invites
      $invagain_emails = array_filter($form_state['values']['invites']);
	  $invagain_emails = array_values($invagain_emails);
      $invitesdb = $_SESSION['invitesdb'];
      unset($_SESSION['invitesdb']);
      $emails=array();
      for ($i=0;$i<count($invagain_emails);$i++) {
         $j=$invagain_emails[$i];
         $emails['email'][$i]=$invitesdb['email'][$j];
         $emails['reg_code'][$i]=$invitesdb['reg_code'][$j];
      }
      if (count($emails) > 0) {
// Filter out already registered users, but pass validation.
         $failed_emails = _invite_validate_emails("SELECT mail AS email FROM {users} WHERE mail IN (". db_placeholders($emails, 'varchar') .")", $emails);
      }
   }
   $error = '';
   $failed_emails=array();
   if (count($failed_emails)) {
      $error .= format_plural(count($failed_emails), 'The following recipient is already a member:', 'The following recipients are already members:') .'<br />';
      foreach ($failed_emails as $key => $email) {
        $account = user_load(array('mail' => $email));
        $failed_emails[$key] = theme('username', $account) .' ('. check_plain($email) .')';
      }
      $error .= implode(', ', $failed_emails);
   }
// Check that there is at least one valid e-mail remaining after filtering out dupes.
   if (count($emails) == 0) {
      $error = 'No valid emails left'.$error;
      $_SESSION['operation'] = 0;
      drupal_set_message($error, 'error');
      return;
   }
   else {
// Save valid emails.
   if (strlen($error) > 1) drupal_set_message($error, 'error');
        $_SESSION['operation'] = 2;
        $_SESSION['valid_emails'] = $emails;
  }
return;  
}

//Verwerken van het inviteagain_page_form

if ($_SESSION['operation']==2) {
  global $user, $language;
  $subject = isset($form_state['values']['subject']) ? trim($form_state['values']['subject']) : invite_get_subject();
  $message = isset($form_state['values']['message']) ? trim($form_state['values']['message']) : NULL;
  if (!variable_get('invite_use_users_email', 0)) {
    $from = variable_get('invite_manual_from', '');
  }
  else if ($user->uid) {
    $from = $user->mail;
  }
  if (!$from) {
// Never pass an empty string to drupal_mail()
     $from = NULL;
  }
  $emails = $_SESSION['valid_emails'];
// Create the invite object.
$num_succeeded =0;
  for ($i=0;$i<count($emails['email']);$i++) {
    $invite = _invite_substitutions(array(
      'email' => $emails['email'][$i],
      'code'  => $emails['reg_code'][$i],
      'resent'  => 0,
      'data'  => array('subject' => $subject, 'message' => $message),
    ));
// Send e-mail.
    $params = array('invite' => $invite);

    $messagedrupal_mail = drupal_mail('invite', 'invite', $emails['email'][$i], $language, $params, $from, TRUE);
    if (1 || $messagedrupal_mail['result']) {
      $num_succeeded++;
//Modify old invite: Add a number to reg_code. 
         $failed_emails=array();
         for ($j=0;$j<100;$j++) {
            if ($j == 0) {
		       $keyold = $emails['reg_code'][$i];
			} 
			else {
			    $keyold=number_format($j,0).$emails['reg_code'][$i];
   		    }
            $key = number_format(($j+1),0).$emails['reg_code'][$i];
            $tel=db_result(db_query("SELECT count(*) FROM {invite} WHERE reg_code = '%s'", $key));
			if ($tel == 0 ) {
               $result=db_query("UPDATE {invite} SET reg_code = '%s', canceled = 1 WHERE reg_code = '%s'", $key ,$emails['reg_code'][$i]); 
               invite_save($invite);	  
// Notify other modules.
               if (!$form_state['values']['resent']) {
                 $args = array('inviter' => $invite->inviter, 'email' => $invite->email, 'code' => $invite->code);
                 module_invoke_all('invite', 'invite', $args);
               }
		       break 1;
            }
	     }
	}
	else {
       $failed_emails[] = $emails['email'][$i];
	}
  }
$num_failed = count($failed_emails);
if ($num_failed > 0) {
  $messagetouser = format_plural($num_failed, 'The entered e-mail is not accepted by the mail handler. Please correct it.', '@count entered e-mail addresses are not accepted by the mail handler. Please correct them.');
}
if ($num_succeeded >0) {
  $messagetouser .= format_plural($num_succeeded, 'Your invitation has been successfully sent. You will be notified when the invitee joins the site.', '@count invitations have been successfully sent. You will be notified when any invitee joins the site.');
  drupal_set_message($messagetouser);
}
$_SESSION['operation'] = 0;
$form_state['redirect'] = "user/$user->uid/invites/inviteagain";
return;  
}  
}

/**
 * Generate the invite again form.
 */

function inviteagain_page_form($form, &$form_state) {
   global $user; 
   $valid_emails = $_SESSION['valid_emails'];
   $form_state['rebuild'] = TRUE;
   unset($form['options']['submit']); 
   
// Recipients email address.
   $form['To'] = array(
     '#type' => 'item',
     '#title' => t('To'),
     '#value' => '',
   ); 
   for ($i=0;$i<count($valid_emails['email']);$i++) {
      $form['email_markup'][$i] = array(
        '#type' => 'item',
        '#value' => check_plain($valid_emails['email'][$i]),
      );
      $form['email'][$i] = array(
        '#type' => 'value',
        '#value' => $valid_emails['email'][$i],
      );
   }

// Sender e-mail address.
  if ($user->uid && variable_get('invite_use_users_email', 0)) {
    $from = $user->mail;
  }
  else {
    $from = variable_get('site_mail', ini_get('sendmail_from'));
  }
// Personalize displayed e-mail address.
// @see http://drupal.org/project/pmail
  if (module_exists('pmail')) {
    $from = personalize_email($from);
  }
  $form['from'] = array(
    '#type' => 'item',
    '#title' => t('From'),
    '#value' => check_plain($from),
  );

// Message subject.
  if ($edit && !empty($edit['data']['subject'])) {
    $subject = $edit['data']['subject'];
  }
  else {
    $subject = invite_get_subject();
  }
// Add prefix.
  $prefix = t('Re:');
  if ($edit && drupal_substr($subject, 0, strlen($prefix)) != $prefix) {
    $subject = $prefix .' '. $subject;
  }
  if (variable_get('invite_subject_editable', FALSE)) {
    $form['subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => $subject,
      '#maxlength' => 64,
      '#description' => t('Type the subject of the invitation e-mail.'),
      '#required' => TRUE,
    );
  }
  else {
    $form['subject'] = array(
      '#type' => 'item',
      '#title' => t('Subject'),
      '#value' => check_plain($subject),
    );
  }

// Message body.
  $form['body'] = array(
    '#type' => 'item',
    '#title' => t('Message'),
  );
  $form['message'] = array(
    '#type' => 'textarea',
    '#default_value' => ($edit && !empty($edit['data']['message'])) ? $edit['data']['message'] : '',
    '#description' => format_plural($allow_multiple ? 1 : 99, 'This message will be added to the mail sent to the person you are inviting.', 'This message will be added to the mail sent to the persons you are inviting.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Invite again'),
	'#submit' => array('inviteagainlist_form_submit'),
  );
    $form['abandon'] = array(
    '#type' => 'submit',
    '#value' => t('Back'),
	'#submit' => array('clear'),
  );

  return $form;
}

function clear($form, &$formstate) {
   $_SESSION['operation'] = 0;
   return;
}