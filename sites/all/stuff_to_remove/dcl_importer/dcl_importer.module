<?php
// $Id: dcl_importer.module,v 1.9.2.1 2009/08/21 03:16:31 hadsie Exp $
/**
 * @file
 * Imports contacts through OpenInviter library from various service providers.
 *
 * The module imports contacts from various service providers. The module
 * doesn't do anything in itself but provide the import form interface. It
 * requires one of the connector modules in the modules/ folder and an
 * importer in the importers/ folder to give it functionality.
 */

/**
 * Implementation of hook_theme().
 */
function dcl_importer_theme() {
  return array(
    'dcl_importer_admin_plugin_table' => array(
      'arguments' => array('form' => NULL),
      'file' => 'dcl_importer.admin.inc',
    ),
    'dcl_importer_form' => array(
      'arguments' => array('form' => NULL),
      'template'  => 'dcl_importer_form',
    ),
    'dcl_importer_new_contacts' => array(
      'arguments' => array('form' => array()),
      'file' => 'dcl_importer.form.inc',
    ),
    'dcl_importer_gridselect_cell' => array(
      'arguments' => array('user' => NULL),
      'file' => 'dcl_importer.form.inc',
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function dcl_importer_perm() {
  return array('access DCL Importer');
}

/**
 * Implementation of hook_init().
 */
function dcl_importer_init() {
  module_load_include('inc', 'dcl_importer', 'dcl_importer_api');
  module_load_include('inc', 'dcl_importer', 'dcl_importer.form');

  $path = drupal_get_path('module', 'dcl_importer');
  drupal_add_css($path . '/dcl_importer.css', 'module');
}

/**
 * Implementation of hook_menu().
 */
function dcl_importer_menu() {
  $items = array();

  $items['admin/settings/dcl_importer'] = array(
    'title' => 'DCL importer settings',
    'description' => t('Drupal contact list importer module settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dcl_importer_admin'),
    'access arguments' => array('access administration pages'),
    'file' => 'dcl_importer.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/settings/dcl_importer/global'] = array(
    'title' => 'Global Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['dcl_importer/js'] = array(
    'page callback' => 'dcl_importer_js',
    'access callback'  => TRUE,
    'file' => 'dcl_importer.form.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * A simple menu access callback that allows you to to run user_access
 * on and array of permissions
 */
function dcl_importer_multi_user_access() {
  foreach (func_get_args() as $arg) {
    if (!user_access($arg)) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * The main importer form.
 * Loads the required JS and calls either the advanced or simple form
 * based on the settings.
 */
function dcl_importer_form($form_state) {
  dcl_importer_check_engines();
  
  // Load the necessary JS for the table select code
  $path = drupal_get_path('module', 'dcl_importer');
  drupal_add_js($path . '/dcl_importer.js');
  drupal_add_js('misc/tableselect.js');

  $settings = array(
    'select_all' => variable_get('dcl_importer_invite_select_all', TRUE),
  );
  drupal_add_js(array('dcl_importer' => $settings), "setting");

  if (variable_get('dcl_importer_advanced_form', FALSE)) {
    return dcl_importer_advanced_form($form_state);
  }
  else {
    return dcl_importer_simple_form($form_state);
  }
}

function dcl_importer_check_engines() {
  if (!count(dcl_importer_api_engines())) {
    drupal_set_message('No contact importer engines have been enabled. Please go to the <a href="admin/build/modules">modules settings page</a> and enable at least one engine.', 'error');
  }
}

/**** Private helper functions ****/

/**
 * Execute the import action hook
 * See README.txt for more details on the parameters.
 */
function _dcl_importer_invoke_import_action($op, $a2 = NULL, $a3 = NULL) {
  return module_invoke_all('import_action', $op, $a2, $a3);
}

/**
 * Load the appropriate engine importer form and setup the validate and
 * submit callbacks for that engine.
 */
function _dcl_importer_load_engine_form(&$form, $form_state, $module) {
  if (!isset($form['import_form'])) {
    $form['import_form'] = array();
  }
  $form['import_form'] += call_user_func($module . '_form', $form_state);
  $form['import_form']['#prefix'] = '<div id="dcl-import-form-wrapper">';
  $form['import_form']['#suffix'] = '</div>';
  
  $form['import_form']['submit']['#validate'][] = 'dcl_importer_form_validate';
  $form['import_form']['submit']['#validate'][] = $module . '_form_validate';
  $form['import_form']['submit']['#submit'][] = 'dcl_importer_form_submit';
  $form['import_form']['submit']['#submit'][] = $module . '_form_submit';
}

/**
 * @param $providers - the list of providers in the format that
 *   dcl_importer_api_get_providers returns.
 * @return - the array of providers, sorted and with the import module stripped
 *   from the array.
 */
function _dcl_importer_clean_provider_list($providers) {
  // Clean up and sort the providers list
  $clean_providers = array();

  foreach ($providers as $provider) {
    foreach ($provider as $key => $name) {
      $clean_providers[$key] = $name;
    }
  }
  
  uksort($clean_providers, "_dcl_importer_provider_sort");
  return $clean_providers;
}
function _dcl_importer_provider_sort($a, $b) {
  $provider_priority = variable_get('dcl_importer_providers', array());
  foreach ($provider_priority as $priority) {
    if ($a == $priority) {
      return -1;
    }
    if ($b == $priority) {
      return 1;
    }
  }
  if ($a < $b) {
    return -1;
  }
  elseif ($a == $b) {
    return 0;
  }
  return 1;
}


function _dcl_importer_session_contacts($new, $existing) {
  $session_new = isset($_SESSION['dcl_contacts_new']) ? unserialize($_SESSION['dcl_contacts_new']) : array();
  $session_existing = isset($_SESSION['dcl_contacts_existing']) ? unserialize($_SESSION['dcl_contacts_existing']) : array();
  foreach ($new as $key => $contact) {
    $session_new[$contact['mail']] = $contact;
  }
  foreach ($existing as $key => $contact) {
    $session_existing[$key] = $contact;
  }
  $_SESSION['dcl_contacts_new'] = serialize($session_new);
  $_SESSION['dcl_contacts_existing'] = serialize($session_existing);
  return array($session_new, $session_existing);
}

