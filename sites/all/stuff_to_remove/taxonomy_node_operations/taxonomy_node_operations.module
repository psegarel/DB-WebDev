<?php
// $Id: taxonomy_node_operations.module,v 1.1.2.1 2007/07/12 14:47:09 morrissinger Exp $

// 22-12-08 - Yoran Brault - Added Drupal 6.2 Compatibility
// 22-12-08 - Yoran Brault - Added term removing support
// 22-12-08 - Yoran Brault - Some change in taxo management

function taxonomy_node_operations_node_operations() {
  $vocabularies = taxonomy_get_vocabularies();

  $operations = array();

  foreach($vocabularies as $vid => $vocabulary) {
    $operations[]=array(
				'label' => t('Vocabulary')." '".$vocabulary->name."'",
    );
    if ($vocabulary->multiple) {
      $operation="add";
    } else {
      $operation="change to";
    }
    $tree = taxonomy_get_tree($vid);
    foreach($tree as $term) {
      $operations['add_'.$term->tid] = array(
				'label' => t('--- '.$operation.' ') .' ' . $term->name,
				'callback' => 'taxonomy_node_operations_add_term',
				'callback arguments' => array(
					'term' => $term,
					'vocabulary' => $vocabulary,
      ),
      );
      if ($vocabulary->multiple) {
        $operations['delete_'.$term->tid] = array(
				'label' => t('--- Delete ') . $term->name,
				'callback' => 'taxonomy_node_operations_remove_term',
				'callback arguments' => array(
					'term' => $term,
					'vocabulary' => $vocabulary,
        ),
        );
      }
    }
  }
  return $operations;
}

function debug_query($query) {
  $args = func_get_args();
  array_shift($args);
  $query = db_prefix_tables($query);
  if (isset($args[0]) and is_array($args[0])) { // 'All arguments in one array' syntax
    $args = $args[0];
  }
  _db_query_callback($args, TRUE);
  $query = preg_replace_callback(DB_QUERY_REGEXP, '_db_query_callback', $query);
  error_log($query);
  return db_query($query,$args);
}

function taxonomy_node_operations_add_term($nodes, $term, $vocabulary) {
  foreach((array)$nodes as $nid) {
    $node=node_load($nid);
    $tmp = taxonomy_node_get_terms($node);
    $terms=array();
    foreach ($tmp as $node_term) {
      if ($vocabulary->multiple || $node_term->vid!=$vocabulary->vid) {
        $terms[]=$node_term;
      }
    }
    $terms[$term->tid]=$term;
    taxonomy_node_save($node, $terms);
  }
  drupal_set_message(t('The nodes have been !a to the %t term.', array('!a' => ($vocabulary->multiple ? t('added') : t('moved')), '%t' => $term->name)));
}

function taxonomy_node_operations_remove_term($nodes, $term, $vocabulary) {
  foreach((array)$nodes as $nid) {
    $node=node_load($nid);
    $tmp = taxonomy_node_get_terms($node);
    $terms=array();
    foreach ($tmp as $node_term) {
      if ($term->tid!=$node_term->tid) {
        $terms[]=$node_term;
      }
    }
    taxonomy_node_save($node, $terms);
  }
  drupal_set_message(t('The nodes have removed from %t term.', array('%t' => $term->name)));
}